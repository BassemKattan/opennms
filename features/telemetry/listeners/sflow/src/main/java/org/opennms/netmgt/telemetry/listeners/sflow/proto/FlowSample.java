/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2018 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2018 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

package org.opennms.netmgt.telemetry.listeners.sflow.proto;

import java.nio.ByteBuffer;
import java.util.Optional;

import org.opennms.netmgt.telemetry.listeners.api.utils.BufferUtils;
import org.opennms.netmgt.telemetry.listeners.sflow.InvalidPacketException;

import com.google.common.base.MoreObjects;

// struct flow_sample {
//   unsigned int sequence_number;  /* Incremented with each flow sample
//                                     generated by this source_id.
//                                     Note: If the agent resets the
//                                           sample_pool then it must
//                                           also reset the sequence_number.*/
//   sflow_data_source source_id;   /* sFlowDataSource */
//   unsigned int sampling_rate;    /* sFlowPacketSamplingRate */
//   unsigned int sample_pool;      /* Total number of packets that could have
//                                     been sampled (i.e. packets skipped by
//                                     sampling process + total number of
//                                     samples) */
//   unsigned int drops;            /* Number of times that the sFlow agent
//                                     detected that a packet marked to be
//                                     sampled was dropped due to
//                                     lack of resources. The drops counter
//                                     reports the total number of drops
//                                     detected since the agent was last reset.
//                                     A high drop rate indicates that the
//                                     management agent is unable to process
//                                     samples as fast as they are being
//                                     generated by hardware. Increasing
//                                     sampling_rate will reduce the drop
//                                     rate. Note: An agent that cannot
//                                     detect drops will always report
//                                     zero. */
//
//   interface input;               /* Interface packet was received on. */
//   interface output;              /* Interface packet was sent on. */
//
//   flow_record flow_records<>;    /* Information about a sampled packet */
// }

public class FlowSample implements SampleData {

    private final long sequenceNumber;
    private final DataSource sourceId;

    private final long samplingRate;
    private final long samplePool;

    private final long drops;

    private final Interface input;
    private final Interface output;

    private final Array<FlowRecord> flowRecords;

    public FlowSample(final ByteBuffer buffer) throws InvalidPacketException {
        this.sequenceNumber = BufferUtils.uint32(buffer);
        this.sourceId = new DataSource(buffer);

        this.samplingRate = BufferUtils.uint32(buffer);
        this.samplePool = BufferUtils.uint32(buffer);

        this.drops = BufferUtils.uint32(buffer);

        this.input = new Interface(buffer);
        this.output = new Interface(buffer);

        this.flowRecords = new Array(buffer, Optional.empty(), FlowRecord::new);
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                .add("sequenceNumber", sequenceNumber)
                .add("sourceId", sourceId)
                .add("samplingRate", samplingRate)
                .add("samplePool", samplePool)
                .add("drops", drops)
                .add("input", input)
                .add("output", output)
                .add("flowRecords", flowRecords)
                .toString();
    }
}
